
# # Stability Revolt
# situation_planetary_revolt_stability = {
# 	picture = GFX_evt_alien_propaganda
# 	category = negative

# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = no }
# 		}
# 		text = situation_planetary_revolt_desc_standard
# 	}
# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = yes }
# 			target = {
# 				any_owned_pop = {
# 					is_sapient = yes
# 					NOT = { has_ethic = ethic_gestalt_consciousness }
# 				}
# 			}
# 		}
# 		text = situation_planetary_revolt_desc_gestalt_standard
# 	}
# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = yes }
# 			target = {
# 				count_owned_pop = {
# 					limit = {
# 						is_sapient = yes
# 						NOT = { has_ethic = ethic_gestalt_consciousness }
# 					}
# 					count = 0
# 				}
# 			}
# 		}
# 		text = situation_planetary_revolt_desc_gestalt_breakaway_gestalt
# 	}

# 	fail_icon = GFX_situation_outcome_meh
# 	fail_icon_frame = GFX_situation_outcome_frame_green
# 	complete_icon = GFX_situation_outcome_revolt
# 	complete_icon_frame = GFX_situation_outcome_frame_red

# 	on_start = {
# 		target = {
# 			add_modifier = { modifier = planetary_rebels days = -1 }
# 		}
# 	}

# 	on_progress_complete = {
# 		random_country = {
# 			limit = {
# 				has_country_flag = revolt_joiner_empire_@root
# 				is_subject = no
# 				NOR = {
# 					is_in_federation_with = owner
# 					has_defensive_pact = owner
# 					has_non_aggression_pact = owner
# 				}
# 			}
# 			save_event_target_as = new_owner_empire
# 		}
# 		if = {
# 			limit = { exists = event_target:new_owner_empire }
# 			custom_tooltip = situation_planetary_revolt_complete_joiner_tooltip
# 		}
# 		else = {
# 			custom_tooltip = situation_planetary_revolt_complete_tooltip
# 		}
# 		owner = {
# 			if = {
# 				limit = {
# 					any_owned_planet = {
# 						has_modifier = instability_join_revolt
# 						planet_stability < @[ stabilitylevel2 + 10 ]
# 						exists = controller
# 						controller = { is_same_value = root.owner }
# 					}
# 				}
# 				custom_tooltip = planets_joining_revolt_tooltip
# 				owned_planet_list_tooltip = {
# 					limit = {
# 						has_modifier = instability_join_revolt
# 						planet_stability < @[ stabilitylevel2 + 10 ]
# 						exists = controller
# 						controller = { is_same_value = root.owner }
# 					}
# 				}
# 			}
# 		}
# 		hidden_effect = {
# 			situation_event = { id = unrest.4200 }
# 		}
# 	}

# 	on_fail = {
# 		custom_tooltip = situation_planetary_revolt_fail_tooltip
# 		hidden_effect = {
# 			target = {
# 				planet_event = { id = unrest.4300 }
# 				set_timed_planet_flag = {
# 					flag = recent_revolt_attempt
# 					days = 3600
# 				}
# 			}
# 			cleanup_separatism_situation = yes
# 			destroy_situation = this
# 		}
# 	}

# 	on_abort = {
# 		cleanup_separatism_situation = yes
# 	}

# 	abort_trigger = {
# 		NOT = {
# 			owner = { #otherwise, that event flips ownership, which immediately invalidates the Situation
# 				has_active_event = { unrest.4200 }
# 			}
# 		}
# 		OR = {
# 			NOT = { exists = target.owner }
# 			target.owner = { NOT = { is_same_value = root.owner } }
# 			target.controller = { NOT = { is_same_value = root.owner } }
# 		}
# 	}

# 	start_value = 5

# 	stages = {
# 		revolt_severity_1 = {
# 			icon = GFX_situation_stage_1
# 			icon_background = GFX_situation_stage_frame_red
# 			target_modifier = { planet_stability_add = -10 }
# 			end = 25
# 		}
# 		revolt_severity_2 = {
# 			icon = GFX_situation_stage_2
# 			icon_background = GFX_situation_stage_frame_red
# 			on_first_enter = {
# 				#Characteristics of the revolt (ethics, if faction is unhappy)
# 				situation_event = { id = unrest.100 }
# 			}
# 			target_modifier = { planet_stability_add = -15 }
# 			end = 50
# 		}
# 		revolt_severity_3 = {
# 			icon = GFX_situation_stage_3
# 			icon_background = GFX_situation_stage_frame_red
# 			on_first_enter = {
# 				#Characteristics of the revolt (species, other planets joining)
# 				situation_event = { id = unrest.4000 }
# 			}
# 			target_modifier = { planet_stability_add = -20 }
# 			end = 75
# 		}
# 		revolt_severity_4 = {
# 			icon = GFX_situation_stage_4
# 			icon_background = GFX_situation_stage_frame_red
# 			on_first_enter = {
# 				#Separatists will ask neighboring empires for support [bypasses included] If someone can be found, the player is notified.
# 				situation_event = { id = unrest.4050 }
# 			}
# 			target_modifier = { planet_stability_add = -25 }
# 			end = 100
# 		}
# 	}

# 	approach = {
# 		name = approach_revolt_do_nothing
# 		icon = GFX_situation_approach_this_is_fine
# 		icon_background = GFX_situation_approach_bg_yellow
# 		default = yes
# 		on_select = {
# 			custom_tooltip = deficit_approach_do_nothing_tooltip
# 		}
# 		ai_weight = {
# 			base = 2
# 		}
# 	}

# 	approach = {
# 		name = approach_revolt_distribute_amenities
# 		icon = GFX_situation_approach_amenities
# 		icon_background = GFX_situation_approach_bg_green
# 		triggered_target_modifier = {
# 			potential = {
# 				owner = { is_gestalt = no }
# 			}
# 			modifier = {
# 				planet_amenities_add = 20
# 			}
# 		}
# 		triggered_target_modifier = {
# 			potential = {
# 				owner = { is_gestalt = yes }
# 			}
# 			modifier = {
# 				planet_amenities_no_happiness_add = 20
# 			}
# 		}
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				trigger = {
# 					owner = { is_gestalt = no }
# 				}
# 				consumer_goods = 20
# 			}
# 			upkeep = {
# 				trigger = {
# 					owner = { is_gestalt = yes }
# 				}
# 				unity = 30
# 			}
# 		}
# 		ai_weight = {
# 			base = 2
# 		}
# 	}

# 	approach = {
# 		name = approach_revolt_crackdown
# 		icon = GFX_situation_approach_whip
# 		icon_background = GFX_situation_approach_bg_red
# 		target_modifier = {
# 			job_soldier_stability_add = 3
# 			planet_army_build_speed_mult = 0.5
# 			planet_building_stronghold_build_speed_mult = 0.5
# 			planet_soldiers_energy_upkeep_add = 1
# 		}
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				unity = 30
# 			}
# 		}
# 		ai_weight = {
# 			base = 1
# 			modifier = {
# 				factor = 3
# 				owner = {
# 					OR = {
# 						is_militarist = yes
# 						is_authoritarian = yes
# 						is_machine_empire = yes
# 					}
# 				}
# 			}
# 		}
# 	}

# 	on_monthly = {
# 		random_events = {
# 			100 = 0
# 			3 = unrest.101
# 			3 = unrest.105
# 			3 = unrest.110
# 		}
# 	}

# 	monthly_progress = {
# 		base = 0
# 		modifier = {
# 			add = target.value:revolt_situation_low_stability_factor
# 			desc = STRING_LOW_STABILITY
# 			target = { planet_stability < @stabilitylevel2 }
# 		}
# 		modifier = {
# 			add = 1
# 			desc = STRING_UNEMPLOYMENT
# 			target = { num_unemployed >= 2 }
# 		}
# 		modifier = {
# 			add = 2
# 			desc = STRING_PURGING
# 			target = {
# 				has_current_purge = yes
# 				any_owned_pop = {
# 					is_being_purged = yes
# 					NOT = {
# 						has_purge_type = { type = purge_neutering }
# 					}
# 				}
# 			}
# 		}
# 		modifier = {
# 			add = 1
# 			desc = STRING_PURGING
# 			target = {
# 				has_current_purge = yes
# 				count_owned_species = {
# 					limit = {
# 						OR = {
# 							has_citizenship_type = { type = citizenship_purge country = root.owner }
# 							has_citizenship_type = { type = citizenship_purge_machine country = root.owner }
# 						}
# 						NOT = { has_purge_type = { type = purge_neutering country = root.owner } }
# 					}
# 					count = 0
# 				}
# 			}
# 		}
# 		modifier = {
# 			add = 1
# 			desc = STRING_ASSIMILATION
# 			target = {
# 				any_owned_species = {
# 					has_citizenship_type = { type = citizenship_assimilation country = root.owner }
# 				}
# 			}
# 		}
# 		modifier = {
# 			subtract = target.value:revolt_situation_high_stability_factor
# 			desc = STRING_HIGH_STABILITY
# 			target = { planet_stability > @stabilitylevel3 }
# 		}
# 		modifier = {
# 			desc = STRING_STARBASE_CITADEL
# 			subtract = 1
# 			exists = target.solar_system.starbase
# 			target.solar_system.starbase = {
# 				has_starbase_size >= starbase_citadel
# 				NOT = { is_starbase_type = sfortress }
# 			}
# 		}
# 		modifier = {
# 			desc = STRING_STARBASE_BASTION
# 			subtract = 1
# 			exists = target.solar_system.starbase
# 			target.solar_system.starbase = {
# 				has_starbase_size > starbase_starport
# 				has_starbase_size < starbase_citadel
# 				is_starbase_type = sfortress
# 			}
# 		}
# 		modifier = {
# 			desc = STRING_STARBASE_BASTION
# 			subtract = 2
# 			exists = target.solar_system.starbase
# 			target.solar_system.starbase = {
# 				has_starbase_size >= starbase_citadel
# 				is_starbase_type = sfortress
# 			}
# 		}
# 		complex_trigger_modifier = {
# 			trigger = count_system_planet
# 			trigger_scope = target.solar_system
# 			parameters = {
# 				limit = {
# 					is_colony = yes
# 					NOT = { is_same_value = root.target }
# 					planet_stability >= @stabilitylevel3
# 					num_pops > 5
# 				}
# 			}
# 			potential = {
# 				target.solar_system = {
# 					any_system_planet = {
# 						is_colony = yes
# 						NOT = { is_same_value = root.target }
# 						planet_stability >= @stabilitylevel3
# 						num_pops > 5
# 					}
# 				}
# 			}
# 			desc = STRING_LOYAL_PLANETS_IN_SYSTEM
# 			mode = subtract
# 			mult = 2
# 		}
# 		complex_trigger_modifier = {
# 			trigger = count_system_planet
# 			trigger_scope = target.solar_system
# 			parameters = {
# 				limit = {
# 					is_colony = yes
# 					NOT = { is_same_value = root.target }
# 					planet_stability < @stabilitylevel2
# 					num_pops > 5
# 				}
# 			}
# 			potential = {
# 				target.solar_system = {
# 					any_system_planet = {
# 						is_colony = yes
# 						NOT = { is_same_value = root.target }
# 						planet_stability < @stabilitylevel2
# 						num_pops > 5
# 					}
# 				}
# 			}
# 			desc = STRING_REBELLIOUS_PLANETS_IN_SYSTEM
# 			mode = add
# 			mult = 2
# 		}
# 		modifier = {
# 			subtract = target.value:revolt_situation_garrison_factor
# 			desc = STRING_PLANETARY_GARRISON
# 			target = { planet_garrison_strength > 200 }
# 		}
# 		modifier = {
# 			subtract = 1
# 			desc = STRING_WEAK_PLANET
# 			target = { num_pops < 30 }
# 			NOT = {
# 				owner = {
# 					any_owned_planet = {
# 						has_modifier = instability_join_revolt
# 					}
# 				}
# 			}
# 		}
# 		modifier = {
# 			add = 1
# 			desc = STRING_STRONG_PLANET
# 			target = { num_pops > 60 }
# 		}
# 		modifier = {
# 			desc = STRING_REBELLIOUS_JOINER_PLANETS_IN_OWNER
# 			add = value:revolt_situation_rebellion_joiners
# 			owner = {
# 				any_owned_planet = {
# 					has_modifier = instability_join_revolt
# 					planet_stability < @[ stabilitylevel2 + 10 ]
# 					exists = controller
# 					controller = { is_same_value = root.owner }
# 				}
# 			}
# 		}
# 		modifier = {
# 			desc = STRING_OUTSIDE_SUPPORT
# 			add = 2
# 			any_country = { has_country_flag = revolt_joiner_empire_@root }
# 		}
# 	}
# }

# # Pandemic - Planet
# situation_civstrife_pandemic_planet = {
# 	picture = GFX_evt_emergency_workers
# 	category = positive

# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = no }
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_pandemic_planet_sing_desc
# 	}

# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = no }
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_pandemic_planet_mult_desc
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = no
# 			}
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_panedemic_planet_sing_gestalt
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = no
# 			}
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_panedemic_planet_mult_gestalt
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = yes
# 			}
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_panedemic_planet_sing_machine
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = yes
# 			}
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_panedemic_planet_mult_machine
# 	}

# 	fail_icon = GFX_situation_outcome_negative
# 	fail_icon_frame = GFX_situation_outcome_frame_red
# 	complete_icon = GFX_situation_outcome_positive
# 	complete_icon_frame = GFX_situation_outcome_frame_green

# 	on_start = {
# 		target = {
# 			save_event_target_as = pandemic_planet

# 			if = {
# 				limit = {
# 					any_owned_pop = {
# 						has_pop_flag = pandemic_pop
# 						species = { NOT = { has_species_flag = pandemic_species } }
# 					}
# 				}
# 				random_owned_pop = {
# 					limit = {
# 						has_pop_flag = pandemic_pop
# 						species = { NOT = { has_species_flag = pandemic_species } }
# 					}
# 					set_pop_flag = sick_pop_planet_@root # ID'd by situation
# 					species = {
# 						save_event_target_as = pandemic_species_loc
# 						set_species_flag = sick_species_planet@root
# 						set_species_flag = pandemic_species # For cross border travel
# 					}
# 				}
# 			}
# 			else = {
# 				random_owned_pop = {
# 					limit = { is_robot_pop = no }
# 					species = {
# 						save_event_target_as = pandemic_species_loc
# 						set_species_flag = sick_species_planet@root
# 						set_species_flag = pandemic_species # For cross border travel
# 					}
# 				}
# 				random_list = {
# 					30 = { set_variable = { which = num_sick_pops value = 0.15 } }
# 					30 = { set_variable = { which = num_sick_pops value = 0.20 } }
# 					25 = { set_variable = { which = num_sick_pops value = 0.25 } }
# 					15 = { set_variable = { which = num_sick_pops value = 0.30 } }
# 				}
# 				# set_variable = { which = num_sick_pops value = 1 }
# 				multiply_variable = {
# 					which = num_sick_pops
# 					value = trigger:num_pops
# 				}
# 				round_variable = num_sick_pops
# 				while = {
# 					count = num_sick_pops
# 					random_owned_pop = {
# 						limit = {
# 							species = { has_species_flag = sick_species_planet@root }
# 							NOT = { has_pop_flag = sick_pop_planet_@root }
# 						}
# 						set_pop_flag = sick_pop_planet_@root # ID'd by situation
# 						set_pop_flag = pandemic_pop # For cross border travel
# 					}
# 				}
# 				clear_variable = num_sick_pops
# 			}
# 		}
# 		random_list = {
# 			75 = {
# 				set_situation_flag = bad_pandemic
# 				change_variable = { which = pressure_planetary value = 10 }
# 			}
# 			20 = {
# 				set_situation_flag = very_bad_pandemic
# 				change_variable = { which = pressure_planetary value = 15 }
# 			}
# 			5 = {
# 				set_situation_flag = worst_pandemic
# 				change_variable = { which = pressure_planetary value = 20 }
# 			}
# 		}
# 		if = {
# 			limit = {
# 				has_situation_flag = migratory_pandemic
# 			}
# 			situation_event = { id = civpan.8030 }
# 		}
# 	}

# 	on_progress_complete = {
# 		custom_tooltip = situation_civstrife_pandemic_cured
# 		hidden_effect = {
# 			owner = {
# 				every_owned_pop = {
# 					limit = { has_pop_flag = sick_pop_planet_@root }
# 					remove_pop_flag = sick_pop_planet_@root
# 					remove_pop_flag = pandemic_pop
# 				}
# 				every_owned_species = {
# 					limit = { has_species_flag = sick_species_planet_@root }
# 					remove_species_flag = sick_species_planet_@root
# 					remove_species_flag = pandemic_species
# 				}
# 			}
# 			target = {
# 				if = {
# 					limit = { has_planet_flag = pandemic_quarantine }
# 					remove_planet_flag = pandemic_quarantine
# 				}
# 				if = {
# 					limit = { has_planet_flag = pandemic_quarantine_direct }
# 					remove_planet_flag = pandemic_quarantine_direct
# 				}
# 			}
# 			situation_event = { id = civpan.8050 }
# 		}
# 	}

# 	on_fail = {
# 		# custom_tooltip = situation_civstrife_pandemic_failed
# 	}

# 	on_abort = {
# 		owner = {
# 			every_owned_species = {
# 				limit = { has_species_flag = sick_species_planet_@root }
# 				remove_species_flag = sick_species_planet_@root
# 				remove_species_flag = pandemic_species
# 			}
# 		}
# 		target = {
# 			if = {
# 				limit = { has_planet_flag = pandemic_quarantine }
# 				remove_planet_flag = pandemic_quarantine
# 			}
# 			if = {
# 				limit = { has_planet_flag = pandemic_quarantine_direct }
# 				remove_planet_flag = pandemic_quarantine_direct
# 			}
# 		}
# 		situation_event = { id = civpan.8055 }
# 	}

# 	abort_trigger = {
# 		owner = {
# 			NOT = {
# 				any_owned_pop = { has_pop_flag = sick_pop_planet_@root }
# 			}
# 		}
# 	}

# 	start_value = 0

# 	stages = {
# 		planetary_pandemic_1 = {
# 			icon = GFX_situation_stage_1
# 			icon_background = GFX_situation_stage_frame_red
# 			target_modifier = { planet_stability_add = -5 }
# 			end = 25
# 		}
# 		planetary_pandemic_2 = {
# 			icon = GFX_situation_stage_2
# 			icon_background = GFX_situation_stage_frame_red
# 			target_modifier = { planet_stability_add = -10 }
# 			end = 50
# 		}
# 		planetary_pandemic_3 = {
# 			icon = GFX_situation_stage_3
# 			icon_background = GFX_situation_stage_frame_green
# 			target_modifier = { planet_stability_add = 2 }
# 			end = 75
# 		}
# 		planetary_pandemic_4 = {
# 			icon = GFX_situation_stage_4
# 			icon_background = GFX_situation_stage_frame_green
# 			target_modifier = { planet_stability_add = 5 }
# 			end = 100
# 		}
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_do_nothing
# 		icon = GFX_situation_approach_this_is_fine
# 		icon_background = GFX_situation_approach_bg_red
# 		default = yes
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				unity = 0.2
# 				multiplier = target.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 2
# 		}
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_governor
# 		icon = GFX_situation_approach_pop
# 		icon_background = GFX_situation_approach_bg_yellow
# 		allow = {
# 			custom_tooltip = {
# 				fail_text = pandemic_planet_no_governor
# 				target.sector = {
# 					exists = leader
# 				}
# 			}
# 		}
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				energy = 0.75
# 				unity = 0.1
# 				multiplier = target.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 100
# 		}
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_direct
# 		icon = GFX_situation_approach_scales
# 		icon_background = GFX_situation_approach_bg_yellow
# 		on_select = {
# 			target = { set_planet_flag = pandemic_quarantine }
# 		}
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				energy = 2.25
# 				unity = 0.05
# 				multiplier = target.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 50
# 			# modifier = { }
# 		}
# 	}

# 	on_monthly = {
# 		events = {
# 			civpan.3000			# Monthly Spread
# 			civpan.3010			# Check If Spread to Another Planet
# 			civpan.6000			# International Migration Event
# 	    }
# 	}

# 	monthly_progress = {
# 		base = 0.25
# 		modifier = {
# 			add = 0.1
# 			desc = pandemic_gov_supp_desc
# 			current_situation_approach = approach_civstrife_pandemic_governor
# 		}
# 		modifier = {
# 			add = 0.2
# 			desc = pandemic_direct_supp_desc
# 			current_situation_approach = approach_civstrife_pandemic_direct
# 		}
# 	}
# }

# # Pandemic - Sector
# situation_civstrife_pandemic_sector = {
# 	picture = GFX_evt_emergency_workers
# 	category = positive

# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = no }
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_pandemic_sector_sing_desc
# 	}

# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = no }
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_pandemic_sector_mult_desc
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = no
# 			}
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_panedemic_sector_sing_gestalt
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = no
# 			}
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_panedemic_sector_mult_gestalt
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = yes
# 			}
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_panedemic_sector_sing_machine
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = yes
# 			}
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_panedemic_sector_mult_machine
# 	}

# 	fail_icon = GFX_situation_outcome_negative
# 	fail_icon_frame = GFX_situation_outcome_frame_red
# 	complete_icon = GFX_situation_outcome_positive
# 	complete_icon_frame = GFX_situation_outcome_frame_green

# 	on_start = {
# 		situation_event = { id = civpan.8000 }
# 		set_variable = { which = pandemic_cure_progress value = event_target:initial_pandemic.pandemic_cure_progress }
# 		add_situation_progress = pandemic_cure_progress
# 		clear_variable = pandemic_cure_progress
# 		owner = {
# 			every_owned_pop = {
# 				limit = { has_pop_flag = sick_pop_planet_@event_target:initial_pandemic }
# 				remove_pop_flag = sick_pop_planet_@event_target:initial_pandemic
# 				set_pop_flag = sick_pop_sector_@root
# 			}
# 			random_owned_species = {
# 				limit = { has_species_flag = sick_species_planet@event_target:initial_pandemic }
# 				remove_species_flag = sick_species_planet@event_target:initial_pandemic
# 				set_species_flag = sick_species_sector_@root
# 				save_event_target_as = pandemic_species_loc
# 			}
# 		}
# 		if = {
# 			limit = {
# 				event_target:initial_pandemic = { has_situation_flag = bad_pandemic }
# 			}
# 			set_situation_flag = bad_pandemic
# 			change_variable = { which = pressure_sectoral value = 10 }
# 		}
# 		else_if = {
# 			limit = {
# 				event_target:initial_pandemic = { has_situation_flag = very_bad_pandemic }
# 			}
# 			set_situation_flag = very_bad_pandemic
# 			change_variable = { which = pressure_sectoral value = 15 }
# 		}
# 		else_if = {
# 			limit = {
# 				event_target:initial_pandemic = { has_situation_flag = worst_pandemic }
# 			}
# 			set_situation_flag = worst_pandemic
# 			change_variable = { which = pressure_sectoral value = 20 }
# 		}
# 	}

# 	on_progress_complete = {
# 		custom_tooltip = situation_civstrife_pandemic_cured
# 		hidden_effect = {
# 			owner = {
# 				every_owned_pop = {
# 					limit = { has_pop_flag = sick_pop_sector_@root }
# 					remove_pop_flag = sick_pop_sector_@root
# 					remove_pop_flag = pandemic_pop
# 				}
# 				every_owned_species = {
# 					limit = { has_species_flag = sick_species_sector_@root }
# 					remove_species_flag = sick_species_sector_@root
# 					remove_species_flag = pandemic_species
# 				}
# 			}
# 			target = {
# 				sector = {
# 					if = {
# 						limit = { has_sector_flag = pandemic_quarantine }
# 						remove_sector_flag = pandemic_quarantine
# 					}
# 					if = {
# 						limit = { has_sector_flag = pandemic_quarantine_direct }
# 						remove_sector_flag = pandemic_quarantine_direct
# 					}
# 				}
# 				if = {
# 					limit = { has_planet_flag = pandemic_quarantine }
# 					remove_planet_flag = pandemic_quarantine
# 				}
# 				if = {
# 					limit = { has_planet_flag = pandemic_quarantine_direct }
# 					remove_planet_flag = pandemic_quarantine_direct
# 				}
# 			}
# 			remove_sector_modifiers_effect = yes
# 			situation_event = { id = civpan.8050 }
# 		}
# 	}

# 	on_fail = {
# 		# custom_tooltip = situation_civstrife_pandemic_failed
# 	}

# 	on_abort = {
# 		owner = {
# 			every_owned_species = {
# 				limit = { has_species_flag = sick_species_sector_@root }
# 				remove_species_flag = sick_species_sector_@root
# 				remove_species_flag = pandemic_species
# 			}
# 		}
# 		target = {
# 			sector = {
# 				if = {
# 					limit = { has_sector_flag = pandemic_quarantine }
# 					remove_sector_flag = pandemic_quarantine
# 				}
# 				if = {
# 					limit = { has_sector_flag = pandemic_quarantine_direct }
# 					remove_sector_flag = pandemic_quarantine_direct
# 				}
# 			}
# 			if = {
# 				limit = { has_planet_flag = pandemic_quarantine }
# 				remove_planet_flag = pandemic_quarantine
# 			}
# 			if = {
# 				limit = { has_planet_flag = pandemic_quarantine_direct }
# 				remove_planet_flag = pandemic_quarantine_direct
# 			}
# 		}
# 		remove_sector_modifiers_effect = yes
# 		situation_event = { id = civpan.8055 }
# 	}

# 	abort_trigger = {
# 		owner = {
# 			NOT = {
# 				any_owned_pop = { has_pop_flag = sick_pop_sector_@root }
# 			}
# 		}
# 	}

# 	start_value = 0

# 	stages = {
# 		sectoral_pandemic_1 = {
# 			icon = GFX_situation_stage_1
# 			icon_background = GFX_situation_stage_frame_red
# 			# target_modifier = { planet_stability_add = -5 }
# 			end = 25
# 		}
# 		sectoral_pandemic_2 = {
# 			icon = GFX_situation_stage_2
# 			icon_background = GFX_situation_stage_frame_red
# 			# target_modifier = { planet_stability_add = -10 }
# 			end = 50
# 		}
# 		sectoral_pandemic_3 = {
# 			icon = GFX_situation_stage_3
# 			icon_background = GFX_situation_stage_frame_green
# 			# target_modifier = { planet_stability_add = 2 }
# 			end = 75
# 		}
# 		sectoral_pandemic_4 = {
# 			icon = GFX_situation_stage_4
# 			icon_background = GFX_situation_stage_frame_green
# 			# target_modifier = { planet_stability_add = 5 }
# 			end = 100
# 		}
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_do_nothing
# 		icon = GFX_situation_approach_this_is_fine
# 		icon_background = GFX_situation_approach_bg_red
# 		default = yes
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				unity = 0.2
# 				multiplier = target.sector.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 0
# 		}	
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_governor
# 		icon = GFX_situation_approach_pop
# 		icon_background = GFX_situation_approach_bg_yellow
# 		allow = {
# 			custom_tooltip = {
# 				fail_text = pandemic_sector_no_governor
# 				target.sector = {
# 					exists = leader
# 				}
# 			}
# 		}
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				energy = 0.75
# 				unity = 0.1
# 				multiplier = target.sector.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 100
# 		}
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_direct
# 		icon = GFX_situation_approach_scales
# 		icon_background = GFX_situation_approach_bg_yellow
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				energy = 2.25
# 				unity = 0.05
# 				multiplier = target.sector.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 50
# 		}
# 	}

# 	on_monthly = {
# 		events = {
# 			civpan.4000			# Monthly Spread
# 			civpan.4010			# Check If Spread to Another Sector
# 			civpan.6000			# International Migration Event
# 	    }
# 	}

# 	monthly_progress = {
# 		base = 0.25
# 		modifier = {
# 			add = 0.1
# 			desc = pandemic_gov_supp_desc
# 			current_situation_approach = approach_civstrife_pandemic_governor
# 		}
# 		modifier = {
# 			add = 0.2
# 			desc = pandemic_direct_supp_desc
# 			current_situation_approach = approach_civstrife_pandemic_direct
# 		}
# 	}
# }

# # Pandemic - National
# situation_civstrife_pandemic_national = {
# 	picture = GFX_evt_emergency_workers
# 	category = positive

# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = no }
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_pandemic_national_sing_desc
# 	}

# 	desc = {
# 		trigger = {
# 			owner = { is_gestalt = no }
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_pandemic_national_mult_desc
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = no
# 			}
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_panedemic_national_sing_gestalt
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = no
# 			}
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_panedemic_national_mult_gestalt
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = yes
# 			}
# 			target = { num_species = 1 }
# 		}
# 		text = situation_civstrife_panedemic_national_sing_machine
# 	}

# 	desc = {
# 		trigger = {
# 			owner = {
# 				is_gestalt = yes
# 				is_machine_empire = yes
# 			}
# 			target = { num_species > 1 }
# 		}
# 		text = situation_civstrife_panedemic_national_mult_machine
# 	}

# 	fail_icon = GFX_situation_outcome_negative
# 	fail_icon_frame = GFX_situation_outcome_frame_red
# 	complete_icon = GFX_situation_outcome_positive
# 	complete_icon_frame = GFX_situation_outcome_frame_green

# 	on_start = {
# 		set_variable = { which = pandemic_cure_progress value = event_target:initial_pandemic.pandemic_cure_progress }
# 		add_situation_progress = pandemic_cure_progress
# 		clear_variable = pandemic_cure_progress
# 		if = {
# 			limit = {
# 				event_target:initial_pandemic = { has_situation_flag = planet_to_national }
# 			}
# 			situation_event = { id = civpan.8010 }
# 			owner = {
# 				every_owned_pop = {
# 					limit = { has_pop_flag = sick_pop_planet_@event_target:initial_pandemic }
# 					remove_pop_flag = sick_pop_planet_@event_target:initial_pandemic
# 					set_pop_flag = sick_pop_national_@root
# 				}
# 				random_owned_species = {
# 					limit = { has_species_flag = sick_species_planet@event_target:initial_pandemic }
# 					remove_species_flag = sick_species_planet@event_target:initial_pandemic
# 					set_species_flag = sick_species_national_@root
# 					save_event_target_as = pandemic_species_loc
# 				}
# 			}
# 		}
# 		else = {
# 			situation_event = { id = civpan.8020 }
# 			owner = {
# 				every_owned_pop = {
# 					limit = { has_pop_flag = sick_pop_sector_@event_target:initial_pandemic }
# 					remove_pop_flag = sick_pop_sector_@event_target:initial_pandemic
# 					set_pop_flag = sick_pop_national_@root
# 				}
# 				every_owned_species = {
# 					limit = { has_species_flag = sick_species_planet_@event_target:initial_pandemic }
# 					remove_species_flag = sick_species_sector_@event_target:initial_pandemic
# 					set_species_flag = sick_species_national_@root
# 					save_event_target_as = pandemic_species_loc
# 				}
# 			}
# 		}
		
# 		if = {
# 			limit = {
# 				event_target:initial_pandemic = { has_situation_flag = bad_pandemic }
# 			}
# 			set_situation_flag = bad_pandemic
# 			change_variable = { which = pressure_national value = 10 }
# 		}
# 		else_if = {
# 			limit = {
# 				event_target:initial_pandemic = { has_situation_flag = very_bad_pandemic }
# 			}
# 			set_situation_flag = very_bad_pandemic
# 			change_variable = { which = pressure_national value = 15 }
# 		}
# 		else_if = {
# 			limit = {
# 				event_target:initial_pandemic = { has_situation_flag = worst_pandemic }
# 			}
# 			set_situation_flag = worst_pandemic
# 			change_variable = { which = pressure_national value = 20 }
# 		}
# 	}

# 	on_progress_complete = {
# 		custom_tooltip = situation_civstrife_pandemic_cured
# 		hidden_effect = {
# 			owner = {
# 				every_owned_pop = {
# 					limit = { has_pop_flag = sick_pop_national_@root }
# 					remove_pop_flag = sick_pop_national_@root
# 					remove_pop_flag = pandemic_pop
# 				}
# 				every_owned_species = {
# 					limit = { has_species_flag = sick_species_national_@root }
# 					remove_species_flag = sick_species_national_@root
# 					remove_species_flag = pandemic_species
# 				}
# 			}
# 			target = {
# 				sector = {
# 					if = {
# 						limit = { has_sector_flag = pandemic_quarantine }
# 						remove_sector_flag = pandemic_quarantine
# 					}
# 					if = {
# 						limit = { has_sector_flag = pandemic_quarantine_direct }
# 						remove_sector_flag = pandemic_quarantine_direct
# 					}
# 				}
# 				if = {
# 					limit = { has_planet_flag = pandemic_quarantine }
# 					remove_planet_flag = pandemic_quarantine
# 				}
# 				if = {
# 					limit = { has_planet_flag = pandemic_quarantine_direct }
# 					remove_planet_flag = pandemic_quarantine_direct
# 				}
# 			}
# 			situation_event = { id = civpan.8050 }
# 		}
# 	}

# 	on_fail = {
# 		# custom_tooltip = situation_civstrife_pandemic_failed
# 	}

# 	on_abort = {
# 		owner = {
# 			every_owned_species = {
# 				limit = { has_species_flag = sick_species_national_@root }
# 				remove_species_flag = sick_species_national_@root
# 				remove_species_flag = pandemic_species
# 			}
# 		}
# 		target = {
# 			sector = {
# 				if = {
# 					limit = { has_sector_flag = pandemic_quarantine }
# 					remove_sector_flag = pandemic_quarantine
# 				}
# 				if = {
# 					limit = { has_sector_flag = pandemic_quarantine_direct }
# 					remove_sector_flag = pandemic_quarantine_direct
# 				}
# 			}
# 			if = {
# 				limit = { has_planet_flag = pandemic_quarantine }
# 				remove_planet_flag = pandemic_quarantine
# 			}
# 			if = {
# 				limit = { has_planet_flag = pandemic_quarantine_direct }
# 				remove_planet_flag = pandemic_quarantine_direct
# 			}
# 		}
# 		situation_event = { id = civpan.8055 }
# 	}

# 	abort_trigger = {
# 		owner = {
# 			NOT = {
# 				any_owned_pop = { has_pop_flag = sick_pop_national_@root }
# 			}
# 		}
# 	}

# 	start_value = 0

# 	stages = {
# 		national_pandemic_1 = {
# 			icon = GFX_situation_stage_1
# 			icon_background = GFX_situation_stage_frame_red
# 			modifier = { planet_stability_add = -5 }
# 			end = 25
# 		}
# 		national_pandemic_2 = {
# 			icon = GFX_situation_stage_2
# 			icon_background = GFX_situation_stage_frame_red
# 			modifier = { planet_stability_add = -10 }
# 			end = 50
# 		}
# 		national_pandemic_3 = {
# 			icon = GFX_situation_stage_3
# 			icon_background = GFX_situation_stage_frame_green
# 			modifier = { planet_stability_add = 2 }
# 			end = 75
# 		}
# 		national_pandemic_4 = {
# 			icon = GFX_situation_stage_4
# 			icon_background = GFX_situation_stage_frame_green
# 			modifier = { planet_stability_add = 5 }
# 			end = 100
# 		}
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_do_nothing
# 		icon = GFX_situation_approach_this_is_fine
# 		icon_background = GFX_situation_approach_bg_red
# 		default = yes
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				unity = 0.2
# 				multiplier = target.owner.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 0
# 		}
# 	}

# 	approach = {
# 		name = approach_civstrife_pandemic_direct
# 		icon = GFX_situation_approach_scales
# 		icon_background = GFX_situation_approach_bg_yellow
# 		resources = {
# 			category = situations
# 			upkeep = {
# 				energy = 2.25
# 				unity = 0.05
# 				multiplier = target.owner.trigger:num_pops
# 			}
# 		}
# 		ai_weight = {
# 			base = 100
# 		}
# 	}

# 	on_monthly = {
# 		events = {
# 			civpan.5000			# Monthly Spread
# 			civpan.6000			# International Migration Event
# 	    }
# 	}

# 	monthly_progress = {
# 		base = 0.25
# 		modifier = {
# 			add = 0.2
# 			desc = pandemic_direct_supp_desc
# 			current_situation_approach = approach_civstrife_pandemic_direct
# 		}
# 	}
# }