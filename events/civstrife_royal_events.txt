
###############################
### Civil Wars by MrFunEGUY ###
###############################


namespace = civroyal

### Ruler Dies Without Heir, pretender.1 dupe
country_event = {
	id = civroyal.1000

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		# from = { is_same_value = root.leader }
		from = { is_ruler = yes }
		NOT = { exists = heir }
		is_imperial_authority =yes
	}

	immediate = {

		if = {
			limit = {
				from = { has_leader_flag = is_imperial_ruler }
				num_sectors > 1
				NOR = {
					exists = heir
					exists = event_target:disinherited_heir
					has_country_flag = succ_crisis_popup
					any_situation = { is_situation_type = situation_civstrife_succession }
				}
			}

			clone_leader = {
				target = from
				hide_leader = yes
				effect = {
					set_immortal = yes # So they dont die while we need them
					set_leader_flag = dead_crisis_leader
					set_leader_flag = dummy_leader
				}
			}
			last_created_leader = { # Dont know why, but doesnt like when I do this in the effect
				set_name = {
					key = crisis_dynasty_ruler_name
					variable_string = "[From.GetSecondName]"
				}
				save_event_target_as = crisis_dynasty_name
				leader_event = { id = civleader.1000 days = 720 }
			}

			clone_leader = {
				target = from
				hide_leader = yes
				effect = {
					set_immortal = yes # So they dont die while we need them
					set_leader_flag = dead_crisis_leader
					set_leader_flag = dummy_leader
				}
			}
			last_created_leader = { # Dont know why, but doesnt like when I do this in the effect
				leader_event = { id = civleader.1000 days = 720 }
				save_event_target_as = prior_dead_ruler
			}
		}

		# Install a new leader
		if = {
			limit = { num_owned_leaders > 0 }
			if = {
				limit = {
					any_owned_leader = {
						is_councilor = yes
						NOT = { is_same_value = root.from }
					}
				}
				random_list = {
					20 = {
						random_owned_leader = {
							limit = {
								NOT = { is_same_value = root.from }
								is_councilor = yes
								leader_class = scientist
							}
							save_event_target_as = seized_power_leader
						}
						modifier = {
							factor = 1.1
							has_ethic = ethic_materialist
						}
						modifier = {
							factor = 1.25
							has_ethic = ethic_fanatic_materialist
						}
						modifier = {
							factor = 1.5
							OR = {
								has_civic = civic_technocracy
								has_civic = civic_science_directorate
							}
						}
						modifier = {
							factor = 1.75
							is_technocracy = yes
						}
						modifier = {
							factor = 0
							NOT = {
								any_owned_leader = {
									NOT = { is_same_value = root.from }
									is_councilor = yes
									leader_class = scientist
								}
							}
						}
					}
					40 = {
						random_owned_leader = {
							limit = {
								NOT = { is_same_value = root.from }
								is_councilor = yes
								leader_class = official
							}
							save_event_target_as = seized_power_leader
						}
						modifier = {
							factor = 1.1
							has_ethic = ethic_xenophile
						}
						modifier = {
							factor = 1.25
							has_ethic = ethic_fanatic_xenophile
						}
						modifier = {
							factor = 1.5
							has_civic = civic_diplomatic_corps
						}
						modifier = {
							factor = 1.75
							is_diplocracy = yes
						}
						modifier = {
							factor = 0
							NOT = {
								any_owned_leader = {
									NOT = { is_same_value = root.from }
									is_councilor = yes
									leader_class = official
								}
							}
						}
					}
					40 = {
						random_owned_leader = {
							limit = {
								NOT = { is_same_value = root.from }
								is_councilor = yes
								leader_class = commander
							}
							save_event_target_as = seized_power_leader
						}
						modifier = {
							factor = 1.1
							has_ethic = ethic_militarist
						}
						modifier = {
							factor = 1.25
							has_ethic = ethic_fanatic_militarist
						}
						modifier = {
							factor = 1.5
							OR = {
								has_civic = civic_naval_traditions
								has_civic = civic_distinguished_admiralty
							}
						}
						modifier = {
							factor = 1.75
							is_stratocracy = yes
						}
						modifier = {
							factor = 0
							NOT = {
								any_owned_leader = {
									NOT = { is_same_value = root.from }
									is_councilor = yes
									leader_class = commander
								}
							}
						}
					}
				}
			}
			else = {
				random_list = {
					20 = {
						random_owned_leader = {
							limit = { leader_class = scientist }
							save_event_target_as = seized_power_leader
						}
						modifier = {
							factor = 1.1
							has_ethic = ethic_materialist
						}
						modifier = {
							factor = 1.25
							has_ethic = ethic_fanatic_materialist
						}
						modifier = {
							factor = 1.5
							OR = {
								has_civic = civic_technocracy
								has_civic = civic_science_directorate
							}
						}
						modifier = {
							factor = 1.75
							is_technocracy = yes
						}
						modifier = {
							factor = 0
							NOT = { any_owned_leader = { leader_class = scientist } }
						}
					}
					40 = {
						random_owned_leader = {
							limit = { leader_class = official }
							save_event_target_as = seized_power_leader
						}
						modifier = {
							factor = 1.1
							has_ethic = ethic_xenophile
						}
						modifier = {
							factor = 1.25
							has_ethic = ethic_fanatic_xenophile
						}
						modifier = {
							factor = 1.5
							has_civic = civic_diplomatic_corps
						}
						modifier = {
							factor = 1.75
							is_diplocracy = yes
						}
						modifier = {
							factor = 0
							NOT = { any_owned_leader = { leader_class = official } }
						}
					}
					40 = {
						random_owned_leader = {
							limit = { leader_class = commander}
							save_event_target_as = seized_power_leader
						}
						modifier = {
							factor = 1.1
							has_ethic = ethic_militarist
						}
						modifier = {
							factor = 1.25
							has_ethic = ethic_fanatic_militarist
						}
						modifier = {
							factor = 1.5
							OR = {
								has_civic = civic_naval_traditions
								has_civic = civic_distinguished_admiralty
							}
						}
						modifier = {
							factor = 1.75
							is_stratocracy = yes
						}
						modifier = {
							factor = 0
							NOT = { any_owned_leader = { leader_class = commander } }
						}
					}
				}
			}

			event_target:seized_power_leader = {
				log = "LEADER: [this.GetName]"
				set_leader_flag = leader_seized_power
			}
		}
		else = {
			log = "BAD ELSE"
			create_leader = {
				class = random_ruler
				species = owner_main_species
				name = random
				traits = {}
			}
			last_created_leader = { save_event_target_as = seized_power_leader }
		}

		assign_leader = event_target:seized_power_leader
	}

	after = {
		country_event = { id = civroyal.1010 days = 3 random = 14 }
	}
}


country_event = { # Disputed Ruler Ascension, start situation
	id = civroyal.1010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		num_sectors > 1
		is_imperial_authority =yes
		NOR = {
			exists = heir
			exists = event_target:disinherited_heir
			has_country_flag = succ_crisis_popup
			any_situation = { is_situation_type = situation_civstrife_succession }
		}
	}

	immediate = {

		# from = { save_event_target_as = crisis_dynasty_name } # For Loc

		ruler = {
			if = {
				limit = { NOT = { has_leader_flag = leader_seized_power } }
				set_name = {
					key = disputed_ruler_name
					variable_string = "[Ruler.GetFirstName]"
					variable_string = "[From.GetSecondName]"
				}
			}
			save_event_target_as = disputed_heir_ruler
		}
	}

	after = {
		country_event = { id = civroyal.1020 }
	}
}

country_event = { # Officials/Dynasts are considering rebellion, start situation
	id = civroyal.1020
	title = civroyal.1020.name
	picture = GFX_evt_enclave_overlord
	hide_window = no
	is_triggered_only = yes

	desc = {
		trigger = {	NOT = { ruler = { has_leader_flag = leader_seized_power } } }
		text = civroyal.1020.desc_reg
	}
	desc = {
		trigger = { ruler = { has_leader_flag = leader_seized_power } }
		text = civroyal.1020.desc_seized
	}

	trigger = {
		num_sectors > 1
		is_country_type_with_subjects = yes
	}

	immediate = {
		if = {
			limit = { NOT = { is_variable_set = succession_crisis } }
			set_variable = { which = succession_crisis value = 1 }
		}
		else = {
			change_variable = { which = succession_crisis value = 1 }
		}

		if = {
			limit = { is_variable_set = crisis_year }
			set_variable = { which = old_crisis value = crisis_year }
		}
		
		export_trigger_value_to_variable = {
			trigger = years_passed
			variable = crisis_year
		}

		change_variable = { which = crisis_year value = 2200 }

		set_country_flag = succ_crisis_popup
	}

	option = {
		name = civroyal.1020.rightful
		hidden_effect = {
			start_situation = {
				type = situation_civstrife_succession
				target = root
			}
			remove_country_flag = succ_crisis_popup
		}
	}
}

situation_event = { # Send Message out to officials to ask if they are loyal
	id = civroyal.1100
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		target = { num_sectors > 1 }
		NOT = { has_situation_flag = loyalty_test_sent }
	}

	immediate = {
		set_situation_flag = loyalty_test_sent
		situation_event = { id = civroyal.1105 days = 1 random = 29 }
	}
}

situation_event = { # Send Message out to officials to ask if they are loyal
	id = civroyal.1105
	hide_window = no
	title = civroyal.1105.name
	desc = civroyal.1105.desc
	picture = GFX_evt_salute
	is_triggered_only = yes

	trigger = {
		target = { num_sectors > 1 }
	}

	immediate = {

		target = {
			set_variable = { which = all_potential_sectors value = 0 }

			if = {
				limit = { num_sectors = 2 }
				random_owned_sector = { 
					limit = { NOT = { any_system_within_border = { is_capital_system = yes } } }
					set_sector_flag = succession_crisis_rebel_sector
				}
			}
			else = {
				every_owned_sector = {
					limit = {
						NOT = { any_system_within_border = { is_capital_system = yes } }
						OR = {
							NOT = { exists = sector_capital.leader }
							sector_capital.leader = { NOT = { has_leader_flag = appointed_heir } } # An heir wants a larger stable realm to inherit
						}
					}
					if = {
						limit = { has_sector_flag = frontier_sector_@root.owner }
						random = {
							chance = 70
							set_sector_flag = succession_crisis_rebel_sector
						}
					}
					else_if = {
						limit = { has_sector_flag = integrated_sector_@root.owner }
						random = {
							chance = 50
							set_sector_flag = succession_crisis_rebel_sector
						}
					}
					else_if = {
						limit = { has_sector_flag = fundamental_sector_@root.owner }
						random = {
							chance = 3
							set_sector_flag = succession_crisis_rebel_sector
						}
					}
				}
			}
		}
	}

	option = {
		name = civroyal.1105.very_well
		hidden_effect = {
			if = {
				limit = { target = { any_owned_sector = { has_sector_flag = succession_crisis_rebel_sector } } }
				situation_event = { id = civroyal.1110 days = 3 random = 21 }
			}
			else = {
				situation_event = { id = civroyal.1115 days = 3 random = 30 }
			}
		}

	}
}

situation_event = { # Rebel Sectors Exist
	id = civroyal.1110
	title = civroyal.1110.name
	desc = civroyal.1110.desc
	picture = GFX_evt_enclave_overlord
	hide_window = no
	is_triggered_only = yes

	immediate = {

		target = {
			set_variable = { which = num_rebel_sectors value = 0 }
			if = {
				limit = { num_sectors = 2 }
				random_owned_sector = { 
					limit = { has_sector_flag = succession_crisis_rebel_sector }
					set_sector_flag = dynast_rebel_sector
					prev = { change_variable = { which = num_rebel_sectors value = 1 } }
				}
			}
			else = {
				every_owned_sector = {
					limit = { has_sector_flag = succession_crisis_rebel_sector }
					if = {
						limit = {
							exists = sector_capital.leader
							owner = { NOT = { has_civic = civic_adoptive_dynasties } }
						}
						random_list = {
							60 = { set_sector_flag = official_rebel_sector }
							40 = { set_sector_flag = dynast_rebel_sector }
						}
					}
					else_if = { # Adoptive Dynasties only have officials rebel
						limit = { owner = { has_civic = civic_adoptive_dynasties } }
						set_sector_flag = official_rebel_sector
					}
					else = {
						set_sector_flag = dynast_rebel_sector
					}
					
					prev = { change_variable = { which = num_rebel_sectors value = 1 } }
				}
			}
		}
	}

	option = {
		name = civroyal.1105.very_well
		hidden_effect = {
			situation_event = { id = civroyal.1120 }
		}
	}
}

situation_event = { # Rebel Sectors Dont Exist
	id = civroyal.1115
	title = civroyal.1115.name
	desc = civroyal.1115.desc
	picture = GFX_evt_enclave_overlord
	hide_window = no
	is_triggered_only = yes

	option = {
		name = EXCELLENT
	}

	after = {
		hidden_effect = {
			destroy_situation = this
		}
	}
}

situation_event = { # Query Official
	id = civroyal.1120
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		target = {
			any_owned_sector = {
				has_sector_flag = succession_crisis_rebel_sector
				NOT = { has_sector_flag = succesion_crisis_talked }
			}
		}
	}

	immediate = {


		save_event_target_as = succession_crisis_sit

		target = {
			random_owned_leader = {
				limit = { has_leader_flag = dead_crisis_leader }
				save_event_target_as = crisis_dynasty_name
			}
			random_owned_sector = { 
				limit = { 
					has_sector_flag = succession_crisis_rebel_sector
					NOT = { has_sector_flag = succesion_crisis_talked }
				}
				set_timed_sector_flag = { flag = succesion_crisis_talked years = 1 }
				save_event_target_as = crisis_sector
				if = {
					limit = { has_sector_flag = official_rebel_sector }
					if = {
						limit = { exists = sector_capital.leader }
						sector_capital.leader = { save_event_target_as = crisis_sector_leader }
					}
					else = {
						owner = {
							create_leader = { # Let's just say he's a deputy in charge
								class = random_ruler
								event_leader = yes
								species = root.ruler
								name = random
								leader_age_min = 25
								leader_age_max = 60
								background_planet = event_target:crisis_sector.sector_capital
								effect = {
									set_leader_flag = new_civwar_ruler
									save_event_target_as = crisis_sector_leader
								}
							}
						}
					}
					
				}
				else = {
					if = {
						limit = { exists = sector_capital.leader }
						sector_capital.leader = { save_event_target_as = switched_dynast_loyalty }
					}
					owner = {
						create_leader = {
							class = random_ruler
							event_leader = yes
							species = root.ruler
							name = random
							leader_age_min = 16
							leader_age_max = 60
							background_planet = event_target:crisis_sector.sector_capital
							effect = {
								set_leader_flag = new_civwar_ruler
								set_name = {
									key = append_dynasty_name
									variable_string = "[This.GetFirstName]"
									variable_string = "[crisis_dynasty_name.GetName]"
								}
								save_event_target_as = crisis_sector_leader
							}
						}
					}
					
				}
				owner = { country_event = { id = civcom.3000 days = 2 random = 10 } }
			}
		}
	}
}

country_event = { # Officials/Dynasts are considering rebellion, start situation
	id = civroyal.1200
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_at_war = yes
		is_succession_country = yes
		is_country_type_with_subjects = yes
		any_subject = { is_at_war = no }
	}

	immediate = {
		every_subject = {
			limit = { is_at_war = no }
			join_war = overlord
		}
	}
}

########

country_event = { # Imperial Ruler Set Flag
	id = civroyal.2000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_imperial_authority =yes
	}

	immediate = {
		ruler = { set_leader_flag = is_imperial_ruler }
	}
}

#####

# Disputed Heritage Event
# country_event = {
# 	id = civroyal.9000
# 	hide_window = yes
# 	is_triggered_only = yes

# 	trigger = {
# 		exists = heir
# 		num_sectors > 1
# 		heir = { NOT = { has_leader_flag = appointed_heir } }
# 	}

# 	immediate = {
# 		random = {
# 			chance = 2
# 			heir = { add_trait = trait_disputed_heritage }
# 			country_event = { id = civroyal.9010 }
# 		}
# 	}
# }

# Disputed Heir Notification
# country_event = {
# 	id = civroyal.9010
# 	title = civroyal.9010.name
# 	desc = civroyal.9010.desc
# 	picture = GFX_evt_smear_campaign
# 	hide_window = no
# 	is_triggered_only = yes

# 	# This is outrageous!
# 	option = {
# 		name = civroyal.9010.a
# 	}

# 	# Rumors have merit, maybe we should disinherit
# 	option = {
# 		name = civroyal.9010.b
# 		hidden_effect = {
# 			heir = { save_global_event_target_as = disinherited_heir_first }
# 			clone_leader = {
# 				target = event_target:disinherited_heir_first
# 				class = random_ruler
# 				effect = { save_global_event_target_as = disinherited_heir }
# 			}
# 			event_target:disinherited_heir_first = {
# 				set_leader_flag = dead_ruler
# 				kill_leader = { show_notification = no }
# 			}
# 			country_event = { id = civheir.1000 }
# 		}
# 	}
# }
